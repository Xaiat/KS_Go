package main

import "fmt"

func main() {
	// 二进制里只有 0 和 1，所以只有两种结果，二进制是逢二进一
	// 十进制的1，用二进制表示就是1
	// 十进制的2，用二进制表示就是10
	// 十进制的3，用二进制表示就是11
	// 十进制的4，用二进制表示就是100
	// 十进制的5，用二进制表示就是101
	// 十进制的6，用二进制表示就是110
	// 十进制的7，用二进制表示就是111
	// 十进制的8，用二进制表示就是1000
	// 十进制的9，用二进制表示就是1001
	// 十进制的10，用二进制表示就是1010
	// 十进制的11，用二进制表示就是1011
	// 十进制的12，用二进制表示就是1100
	// 十进制的13，用二进制表示就是1101
	// 十进制的14，用二进制表示就是1110
	// 十进制的15，用二进制表示就是1111
	// 十进制的16，用二进制表示就是10000
	// 十进制的17，用二进制表示就是10001
	// 十进制的18，用二进制表示就是10010
	// 十进制的19，用二进制表示就是10011
	// 十进制的20，用二进制表示就是10100
	// 位运算平时用的不多，但是在一些特定的场景下会用到，比如权限控制，加密解密：用进制加密解密等
	// 位运算是都是建立在二进制基础上的，是对二进制数进行的运算，计算时会比较 0 和 1 的情况，0 代表 false, 1 代表 true
	// 逻辑运算符中有：& 与 (我和你都是 1 结果才是 1)，| 或 (我和你只要有一个是 1 结果就是 1)，! 非 (我是 1 结果就是 0)
	// 十进制的60，用二进制表示就是	0011 1100
	// 十进制的13，用二进制表示就是	0000 1101
	//						----------------
	// & 与运算结果：			 0000 1100 = 4		我和你 同时满足
	// | 或运算结果：		  	 0011 1101 = 61		我或你 有一个满足即可
	// ^ 异或运算结果：			 0011 0001 = 49		不同为1，相同为0
	// >> 2
	// << 2

	var a uint = 60
	var b uint = 13
	// 位运算
	var c uint = 0

	c = a & b                      // 位运算符：与
	fmt.Printf("%d, 二进制 %b", c, c) //	0000 1100

	c = a | b                        // 位运算符：或
	fmt.Printf("\n%d, 二进制 %b", c, c) //	0011 1101

	c = a ^ b                        // 位运算符：异或
	fmt.Printf("\n%d, 二进制 %b", c, c) //	0011 0001

	// 十进制的60，用二进制表示就是	0011 1100
	c = a << 2                       // 位运算符：左移
	fmt.Printf("\n%d, 二进制 %b", c, c) //	1111 0000

	a = 60
	c = a >> 2                       // 位运算符：右移
	fmt.Printf("\n%d, 二进制 %b", c, c) //	0000 1111
}
