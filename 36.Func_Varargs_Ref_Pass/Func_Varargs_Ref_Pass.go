package main

import "fmt"

// 按照数据的存储特点来划分：参数传递可以分为“值专递”和“引用传递”
// 值类型的数据：操作的数据本身、int、string、bool、float64、array...
// 引用类型的数据：操作的是数据的地址 slice(切片)、map(集合)、chan(通道)...

// 参数传递，首先有2个数组，一个是arr，一个是arr2，arr2的数据是从arr复制来的，所以是不同的空间，修改arr2并不会影响arr
// 引用传递和值传递是函数中的重点内容
// 值传递的核心：传递的是数据的副本，修改数据，对于原始的数据没有影响
// 引用传递的核心：传递的是数据的地址，修改数据，对于原始的数据也会有影响
// 引用传递和值传递的区别：引用传递传递的是数据的地址，修改数据，对于原始的数据也会有影响
// 引用传递的数据类型：引用类型的数据，默认都是引用传递：slice（切片）、map（集合）、chan（通道）
func main() {

	// 切片，是一个可以扩容的数组
	// 切片是引用类型的数据，默认都是引用传递：slice（切片）、map（集合）、chan（通道）
	// 数组传递参数进来是两个值，一个是数组的地址，一个是数组的长度
	// 而切片操作的始终是同一个空间，所以修改切片的值，会影响原始的数据
	s1 := []int{1, 2, 3, 4}
	// 顺序1.值传递
	fmt.Print("默认的数据：", s1)
	// 顺序2.引用传递
	// 传入的参数是引用类型的数据，是地址，所以s1和s2指向的是同一个地址
	update2(s1)
	// 顺序5.引用传递
	fmt.Print("调用后的数据：", s1)
}

func update2(s2 []int) {
	// 顺序3.引用传递
	fmt.Print("传递的数据：", s2)
	s2[0] = 100
	// 顺序4.引用传递
	fmt.Print("修改后的数据：", s2)
}
